//ËæìÂÖ•‰∏§‰∏™ÈÄíÂ¢ûÊéíÂ∫èÁöÑÈìæË°®ÔºåÂêàÂπ∂Ëøô‰∏§‰∏™ÈìæË°®Âπ∂‰ΩøÊñ∞ÈìæË°®‰∏≠ÁöÑËäÇÁÇπ‰ªçÁÑ∂ÊòØÈÄíÂ¢ûÊéíÂ∫èÁöÑ„ÄÇ 
//
// Á§∫‰æã1Ôºö 
//
// ËæìÂÖ•Ôºö1->2->4, 1->3->4
//ËæìÂá∫Ôºö1->1->2->3->4->4 
//
// ÈôêÂà∂Ôºö 
//
// 0 <= ÈìæË°®ÈïøÂ∫¶ <= 1000 
//
// Ê≥®ÊÑèÔºöÊú¨È¢ò‰∏é‰∏ªÁ´ô 21 È¢òÁõ∏ÂêåÔºöhttps://leetcode-cn.com/problems/merge-two-sorted-lists/ 
//
// Related Topics ÈÄíÂΩí ÈìæË°® üëç 311 üëé 0


//leetcode submit region begin(Prohibit modification and deletion)
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode mergeTwoLists(ListNode l1, ListNode l2) {
        if (l1 == null) return l2;
        ListNode cur1 = l1, pre1 = l1, cur2 = l2;
        while (cur1 != null && cur2 != null) {
            if (cur1.val > cur2.val) {
                if (cur1 == l1) {
                    ListNode tmp = new ListNode(cur2.val);
                    tmp.next = cur1;
                    l1 = tmp;
                    cur1 = l1;
                    pre1 = l1;
                } else {
                    ListNode tmp = new ListNode(cur2.val);
                    pre1.next = tmp;
                    tmp.next = cur1;
                    pre1 = tmp;
                }
                cur2 = cur2.next;
            } else {
                pre1 = cur1;
                cur1 = cur1.next;
            }
        }
        while (cur2 != null) {
            pre1.next = new ListNode(cur2.val);
            pre1 = pre1.next;
            cur2 = cur2.next;
        }
        return l1;
    }
}
//leetcode submit region end(Prohibit modification and deletion)
