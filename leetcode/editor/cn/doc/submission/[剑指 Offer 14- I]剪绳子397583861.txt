class Solution {
    public int cuttingRope(int n) {
//        int[] dp = new int[n + 1];
//        for (int i = 2; i <= n; i++) {
//            int curMax = 0;
//            for (int j = 1; j <= i - 1; j++) {
//                curMax = Math.max(curMax, Math.max(j * (i - j), j * dp[i - j]));
//            }
//            dp[i] = curMax;
//        }
//        return dp[n];
        if (n <= 3) return n - 1;
        int a = n / 3, b = n % 3;
        if (b == 1) return (int)Math.pow(3, a - 1) * 4;
        if (b == 2) return (int)Math.pow(3, a) * 2;
        else return (int)Math.pow(3, a);
    }
}

//runtime:0 ms
//memory:38.1 MB
