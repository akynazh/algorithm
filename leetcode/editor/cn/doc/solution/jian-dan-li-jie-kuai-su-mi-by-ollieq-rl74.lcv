比如要求$x^{11}$，正常的乘积需要循环乘11次，时间复杂度为`O(n)`

快速幂的思想就是将指数11 可以转成二进制数1011，则原来的式子可以转化成

$x^{11} = x^{2^{3} + 2^{1} + 2^{0}} = x^{2^{3}} \times x^{2^{1}} \times x^{2^{0}}$，此时只运算了3次乘积，时间复杂度降至`O(logn)`

下方代码中的`x *= x`是一个累乘的过程，得到四位二进制数，对应的四个权重，$x$，$x *= x$，$x^2 \ *= x^2$，$x^4 \ *= x^4$

1011二进制数，从右至左分别为1 1 0 1 ，**只有在1的位置上，才有相应的权重**，这也就是为什么需要通过与运算：`(b & 1) == 1`判断最后一位是否为1。

$x ---> x^{2^{0}}$ --------->    1

$x^2 ---> x^{2^{1}}$ ------------->  1

$x^4 ---> x^{2^{2}}$  ----------------->  0

$x^8 ---> x^{2^{3}}$  -----------------------> 1

最终的结果就是将每一位的1 所对应的权重相乘即可：$x^{2^{0}} \times x^{2^{1}} \times x^{2^{3}}$

* java

```java
class Solution {
    public double myPow(double x, int n) {
        if(x == 0) return 0;
        long b = n;
        double res = 1.0;
        if(b < 0) {
            x = 1 / x;
            b = -b;
        }
        while(b > 0){
            // 最后一位为1，需要乘上该位上的权重
            if((b & 1) == 1){
                res *= x;
            }
            x *= x;
            b >>= 1;
        }
        return res;
    }
}
```

