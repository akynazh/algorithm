![1.png](https://pic.leetcode.cn/1691996527-UHnjvy-1.png)
这题想的话蛮容易想，画图自己也能画出来，看完图也能想到会有两个主要操作：添加左括号以及添加右括号，因此最关键的地方就是如何将 `dfs()` 放到正确的代码位置中，如下面代码所示，应该将 `dfs()` 放到第 18 以及 第 26 行代码中，为什么呢？

观察上图的递归树，拿最左边的一条路径来说：**添加第一个左括号 -> `进递归` -> 添加第二个左括号 -> `进递归` -> 添加第三个左括号 -> `进递归` -> 添加第一个右括号 -> `进递归` -> 添加第二个右括号 -> `进递归` -> 添加第三个右括号 -> `进递归` -> 左右括号都用完了，添加答案并回溯**。

由于在每一层递归中都涉及两个主要操作：添加左括号和添加右括号。因此在递归的代码逻辑中肯定先写上添加左括号和添加右括号的代码逻辑，如下面代码第 16 和第 24 行所示。

接下来看图以及上面加黑的文字可以发现：**「进递归」的逻辑既发生在添加左括号之后，又发生在添加右括号之后**，因此我们自然而然地就**得把 `dfs()` 既写在添加左括号的逻辑之后，又得把 `dfs()` 写在添加右括号的逻辑之后**，如下面代码第 18 和 26 行所示。

**TIP**：下面的代码没有将左括号和右括号的剩余数量写进递归参数，而是作为全局参数，方便理解。

* 

```
class Solution {
    List<String> res = new ArrayList<>();
    StringBuilder sb = new StringBuilder();
    int l, r;
    public List<String> generateParenthesis(int n) {
        l = n;
        r = n;
        dfs();
        return res;
    }

    void dfs(int n) {
        if(l == 0 && r == 0) res.add(sb.toString());

        if(l > 0) {
            sb.append("("); // 第 16 行代码
            l--;
            dfs(); // 第 18 行代码
            l++;
            sb.deleteCharAt(sb.length()-1);
        }

        if(r > l) {
            sb.append(")"); // 第 24 行代码
            r--;
            dfs(); // 第 26 行代码
            r++;
            sb.deleteCharAt(sb.length()-1);
        }
    }
}
```

下面的代码将左括号和右括号的剩余数量写进了递归参数。

* 

```
class Solution {
    List<String> res = new ArrayList<>();
    StringBuilder sb = new StringBuilder();
    public List<String> generateParenthesis(int n) {
        dfs(n, n);
        return res;
    }

    void dfs(int l, int r) {
        if(l == 0 && r == 0) res.add(sb.toString());

        if(l > 0) {
            sb.append("(");
            dfs(l-1, r);
            sb.deleteCharAt(sb.length()-1);
        }

        if(r > l) {
            sb.append(")");
            dfs(l, r-1);
            sb.deleteCharAt(sb.length()-1);
        }
    }
}
```

